/* Imp1Parser.java */
/* Generated By:JavaCC: Do not edit this line. Imp1Parser.java */
package li1.plp.imperative1.parser;

import java.util.LinkedList;
import java.util.List;

import li1.plp.expressions2.expression.ExpAnd;
import li1.plp.expressions2.expression.ExpConcat;
import li1.plp.expressions2.expression.ExpDiv;
import li1.plp.expressions2.expression.ExpEquals;
import li1.plp.expressions2.expression.ExpLength;
import li1.plp.expressions2.expression.ExpMenos;
import li1.plp.expressions2.expression.ExpNot;
import li1.plp.expressions2.expression.ExpOr;
import li1.plp.expressions2.expression.ExpSoma;
import li1.plp.expressions2.expression.ExpSub;
import li1.plp.expressions2.expression.Expressao;
import li1.plp.expressions2.expression.Id;
import li1.plp.expressions2.expression.Valor;
import li1.plp.expressions2.expression.ValorBooleano;
import li1.plp.expressions2.expression.ValorInteiro;
import li1.plp.expressions2.expression.ValorString;
import li1.plp.imperative1.Programa;
import li1.plp.imperative1.command.Atribuicao;
import li1.plp.imperative1.command.Comando;
import li1.plp.imperative1.command.ComandoDeclaracao;
import li1.plp.imperative1.command.IO;
import li1.plp.imperative1.command.IfThenElse;
import li1.plp.imperative1.command.Read;
import li1.plp.imperative1.command.SequenciaComando;
import li1.plp.imperative1.command.Skip;
import li1.plp.imperative1.command.Throw;
import li1.plp.imperative1.command.TryCatch;
import li1.plp.imperative1.command.While;
import li1.plp.imperative1.command.Write;
import li1.plp.imperative1.declaration.Declaracao;
import li1.plp.imperative1.declaration.DeclaracaoComposta;
import li1.plp.imperative1.declaration.DeclaracaoVariavel;
import li1.plp.imperative1.memory.ContextoCompilacaoImperativa;
import li1.plp.imperative1.memory.ContextoExecucaoImperativa;
import li1.plp.imperative1.memory.ListaValor;

public class Imp1Parser implements Imp1ParserConstants {

    public static void main(String args[]) {
        ListaValor entrada = new ListaValor();
            Imp1Parser parser;
            if (args.length == 0) {
                System.out.println("Imperativa 1 PLP Parser EXCEPTIONS:  Reading from standard input . . .");
                parser = new Imp1Parser(System.in);
            } else  {
                System.out.println("Imperativa 1 PLP Parser EXCEPTIONS:  Reading from file " + args[0] + " . . .");
                try {
                        parser = new Imp1Parser(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                        System.out.println("Java Parser Version 1.0.2:  File " + args[0] + " not found.");
                        return;
                }

                List valores = new LinkedList();
                for(int i=1;i<args.length;i++)
                {
                        String parametro = args[i];

                        try {
                                Integer inteiro = Integer.valueOf(parametro);
                                valores.add(new ValorInteiro(inteiro.intValue()));
                                continue;
                        } catch(NumberFormatException e) {

                        }

                        if(parametro.equalsIgnoreCase("true")
                            || parametro.equalsIgnoreCase("false")) {
                                Boolean booleano = Boolean.valueOf(parametro);
                                valores.add(new ValorBooleano(booleano.booleanValue()));
                        } else {
                            valores.add(new ValorString(parametro));
                        }
                }

                  entrada = criaListaValor(valores);
            }

            try {
            Programa programa = parser.Input();
            System.out.println("Imperativa 1 PLP Parser EXCEPTIONS:  program parsed successfully.");
            if(programa.checaTipo(new ContextoCompilacaoImperativa(entrada))) {
                ListaValor saida = programa.executar(new ContextoExecucaoImperativa(entrada));
                System.out.println(saida);
            }
            else {
                System.out.println("Erro de tipo");
            }
        } catch (Exception e) {
            System.out.println("Imperativa 1 PLP Parser EXCEPTIONS:  Encountered errors during parse.");
            e.printStackTrace();
        }
        }

        public static ListaValor criaListaValor(List valores) {
                if(valores.size() == 0) {
                        return new ListaValor();
                }

                Valor primeiro = (Valor) valores.get(0);
                valores.remove(0);
                return new ListaValor(primeiro, criaListaValor(valores));
        }

  static final public Programa Input() throws ParseException {Programa retorno;
    retorno = PPrograma();
    jj_consume_token(0);
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  static final public Programa PPrograma() throws ParseException {Comando retorno;
    retorno = PComando();
{if ("" != null) return new Programa(retorno);}
    throw new Error("Missing return statement in function");
}

  static final public Comando PComando() throws ParseException {Comando retorno;
    if (jj_2_1(2147483647)) {
      retorno = PSequenciaComando();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMAND_SKIP:
      case WHILE:
      case READ:
      case WRITE:
      case IF:
      case TRY:
      case THROW:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:{
        retorno = PComandoSimples();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  static final public SequenciaComando PSequenciaComando() throws ParseException {Comando c1;
        Comando c2;
    c1 = PComandoSimples();
    jj_consume_token(SEMICOLON);
    c2 = PComando();
{if ("" != null) return new SequenciaComando(c1, c2);}
    throw new Error("Missing return statement in function");
}

  static final public IO PIO() throws ParseException {IO retorno;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case READ:{
      retorno = PRead();
      break;
      }
    case WRITE:{
      retorno = PWrite();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  static final public Read PRead() throws ParseException {Id id;
    jj_consume_token(READ);
    jj_consume_token(LPAREN);
    id = PId();
    jj_consume_token(RPAREN);
{if ("" != null) return new Read(id);}
    throw new Error("Missing return statement in function");
}

  static final public Write PWrite() throws ParseException {Expressao exp;
    jj_consume_token(WRITE);
    jj_consume_token(LPAREN);
    exp = PExpressao();
    jj_consume_token(RPAREN);
{if ("" != null) return new Write(exp);}
    throw new Error("Missing return statement in function");
}

  static final public IfThenElse PIfThenElse() throws ParseException {Expressao expressao;
        Comando comandoThen;
        Comando comandoElse;
    jj_consume_token(IF);
    expressao = PExpressao();
    jj_consume_token(THEN);
    comandoThen = PComando();
    jj_consume_token(ELSE);
    comandoElse = PComando();
{if ("" != null) return new IfThenElse (expressao, comandoThen, comandoElse);}
    throw new Error("Missing return statement in function");
}

  static final public TryCatch PTryCatch() throws ParseException {Comando comandoTry;
        Id id;
        Comando comandoCatch;
    jj_consume_token(TRY);
    comandoTry = PComando();
    jj_consume_token(CATCH);
    jj_consume_token(LPAREN);
    id = PId();
    jj_consume_token(RPAREN);
    comandoCatch = PComando();
{if ("" != null) return new TryCatch (comandoTry, id, comandoCatch);}
    throw new Error("Missing return statement in function");
}

  static final public Throw PThrow() throws ParseException {Expressao exp;;
    jj_consume_token(THROW);
    jj_consume_token(LPAREN);
    exp = PExpressao();
    jj_consume_token(RPAREN);
{if ("" != null) return new Throw(exp);}
    throw new Error("Missing return statement in function");
}

  static final public While PWhile() throws ParseException {Expressao expressao;
        Comando comando;
    jj_consume_token(WHILE);
    expressao = PExpressao();
    jj_consume_token(DO);
    comando = PComando();
{if ("" != null) return new While(expressao, comando);}
    throw new Error("Missing return statement in function");
}

  static final public Skip PSkip() throws ParseException {
    jj_consume_token(COMAND_SKIP);
{if ("" != null) return new Skip();}
    throw new Error("Missing return statement in function");
}

  static final public Atribuicao PAtribuicao() throws ParseException {Id id;
        Expressao exp;
    id = PId();
    jj_consume_token(ATTRIB);
    exp = PExpressao();
{if ("" != null) return new Atribuicao(id, exp);}
    throw new Error("Missing return statement in function");
}

  static final public Id PId() throws ParseException {Token token;
    token = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Id(token.toString());}
    throw new Error("Missing return statement in function");
}

  static final public Valor PValorInteiro() throws ParseException {Token token;
    token = jj_consume_token(INTEGER_LITERAL);
{if ("" != null) return new ValorInteiro(Integer.parseInt(token.toString()));}
    throw new Error("Missing return statement in function");
}

  static final public Valor PValorBooleano() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return new ValorBooleano(false);}
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return new ValorBooleano(true);}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Valor PValorString() throws ParseException {Token token;
    token = jj_consume_token(STRING_LITERAL);
String tokenStr = token.toString();
                tokenStr = tokenStr.substring(1,tokenStr.length()-1);
                {if ("" != null) return new ValorString(tokenStr);}
    throw new Error("Missing return statement in function");
}

  static final public Valor PValor() throws ParseException {Valor retorno;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      retorno = PValorInteiro();
      break;
      }
    case TRUE:
    case FALSE:{
      retorno = PValorBooleano();
      break;
      }
    case STRING_LITERAL:{
      retorno = PValorString();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  static final public Expressao PExpMenos() throws ParseException {Expressao retorno;
    jj_consume_token(MINUS);
    retorno = PExpressao();
{if ("" != null) return new ExpMenos(retorno);}
    throw new Error("Missing return statement in function");
}

  static final public Expressao PExpNot() throws ParseException {Expressao retorno;
    jj_consume_token(NOT);
    retorno = PExpressao();
{if ("" != null) return new ExpNot(retorno);}
    throw new Error("Missing return statement in function");
}

  static final public Expressao PExpLength() throws ParseException {Expressao retorno;
    jj_consume_token(LENGTH);
    retorno = PExpressao();
{if ("" != null) return new ExpLength(retorno);}
    throw new Error("Missing return statement in function");
}

  static final public Expressao PExpPrimaria() throws ParseException {Expressao retorno;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      retorno = PId();
      break;
      }
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case STRING_LITERAL:{
      retorno = PValor();
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      retorno = PExpressao();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  static final public Expressao PExpUnaria() throws ParseException {Expressao retorno;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
      retorno = PExpMenos();
      break;
      }
    case NOT:{
      retorno = PExpNot();
      break;
      }
    case LENGTH:{
      retorno = PExpLength();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  static final public Expressao PExpBinaria() throws ParseException {Expressao retorno, param2;
    if (jj_2_2(2147483647)) {
      retorno = PExpConcat();
    } else if (jj_2_3(2147483647)) {
      retorno = PExpSub();
    } else if (jj_2_4(2147483647)) {
      retorno = PExpAnd();
    } else if (jj_2_5(2147483647)) {
      retorno = PExpOr();
    } else if (jj_2_6(2147483647)) {
      retorno = PExpEquals();
    } else if (jj_2_7(2147483647)) {
      retorno = PExpSoma();
    } else if (jj_2_8(2147483647)) {
      retorno = PExpDiv();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  static final public ExpSoma PExpSoma() throws ParseException {Expressao esq;
        Expressao dir;
    esq = PExpPrimaria();
    jj_consume_token(PLUS);
    dir = PExpressao();
{if ("" != null) return new ExpSoma(esq, dir);}
    throw new Error("Missing return statement in function");
}

  static final public ExpDiv PExpDiv() throws ParseException {Expressao esq;
        Expressao dir;
    esq = PExpPrimaria();
    jj_consume_token(SLASH);
    dir = PExpressao();
{if ("" != null) return new ExpDiv(esq, dir);}
    throw new Error("Missing return statement in function");
}

  static final public ExpSub PExpSub() throws ParseException {Expressao esq;
        Expressao dir;
    esq = PExpPrimaria();
    jj_consume_token(MINUS);
    dir = PExpressao();
{if ("" != null) return new ExpSub(esq, dir);}
    throw new Error("Missing return statement in function");
}

  static final public ExpAnd PExpAnd() throws ParseException {Expressao esq;
        Expressao dir;
    esq = PExpPrimaria();
    jj_consume_token(AND);
    dir = PExpressao();
{if ("" != null) return new ExpAnd(esq, dir);}
    throw new Error("Missing return statement in function");
}

  static final public ExpOr PExpOr() throws ParseException {Expressao esq;
        Expressao dir;
    esq = PExpPrimaria();
    jj_consume_token(OR);
    dir = PExpressao();
{if ("" != null) return new ExpOr(esq, dir);}
    throw new Error("Missing return statement in function");
}

  static final public ExpEquals PExpEquals() throws ParseException {Expressao esq;
        Expressao dir;
    esq = PExpPrimaria();
    jj_consume_token(EQ);
    dir = PExpressao();
{if ("" != null) return new ExpEquals(esq, dir);}
    throw new Error("Missing return statement in function");
}

  static final public ExpConcat PExpConcat() throws ParseException {Expressao esq;
        Expressao dir;
    esq = PExpPrimaria();
    jj_consume_token(CONCAT);
    dir = PExpressao();
{if ("" != null) return new ExpConcat(esq, dir);}
    throw new Error("Missing return statement in function");
}

  static final public Expressao PExpressao() throws ParseException {Expressao retorno;
    if (jj_2_9(2)) {
      retorno = PExpUnaria();
    } else if (jj_2_10(2147483647)) {
      retorno = PExpBinaria();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:{
        retorno = PExpPrimaria();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

/*  ADICIONADO OU MODIFICADO DA Imperativa1 PARA A Imperativa2  */
  static final public 
Comando PComandoSimples() throws ParseException {Comando retorno;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMAND_SKIP:{
      retorno = PSkip();
      break;
      }
    case IDENTIFIER:{
      retorno = PAtribuicao();
      break;
      }
    case LBRACE:{
      retorno = PComandoDeclaracao();
      break;
      }
    case WHILE:{
      retorno = PWhile();
      break;
      }
    case IF:{
      retorno = PIfThenElse();
      break;
      }
    case TRY:{
      retorno = PTryCatch();
      break;
      }
    case THROW:{
      retorno = PThrow();
      break;
      }
    case READ:
    case WRITE:{
      retorno = PIO();
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      retorno = PComando();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  static final public ComandoDeclaracao PComandoDeclaracao() throws ParseException {Declaracao dec;
        Comando comando;
    jj_consume_token(LBRACE);
    dec = PDeclaracao();
    jj_consume_token(SEMICOLON);
    comando = PComando();
    jj_consume_token(RBRACE);
{if ("" != null) return new ComandoDeclaracao(dec, comando);}
    throw new Error("Missing return statement in function");
}

  static final public Declaracao PDeclaracao() throws ParseException {Declaracao retorno;
    if (jj_2_11(2147483647)) {
      retorno = PDeclaracaoComposta();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        retorno = PDeclaracaoVariavel();
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        retorno = PDeclaracao();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  static final public DeclaracaoComposta PDeclaracaoComposta() throws ParseException {Declaracao d1;
        Declaracao d2;
    d1 = PDeclaracaoVariavel();
    jj_consume_token(COMMA);
    d2 = PDeclaracao();
{if ("" != null) return new DeclaracaoComposta(d1, d2);}
    throw new Error("Missing return statement in function");
}

  static final public DeclaracaoVariavel PDeclaracaoVariavel() throws ParseException {Id id;
        Expressao exp;
        DeclaracaoVariavel retorno;
    jj_consume_token(VAR);
    id = PId();
    jj_consume_token(ASSIGN);
    exp = PExpressao();
retorno = new DeclaracaoVariavel(id, exp);
{if ("" != null) return retorno;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_3R_PExpBinaria_552_19_58()
 {
    if (jj_3R_PExpOr_620_9_68()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_550_19_57()
 {
    if (jj_3R_PExpAnd_608_9_67()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_548_19_56()
 {
    if (jj_3R_PExpSub_596_9_66()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_546_19_55()
 {
    if (jj_3R_PExpConcat_644_9_65()) return true;
    return false;
  }

  static private boolean jj_3R_PTryCatch_362_9_27()
 {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_PComando_283_5_30()) return true;
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PId_421_9_20()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_PComando_283_5_30()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracaoVariavel_736_10_4()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_PId_421_9_20()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_545_9_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PExpBinaria_546_19_55()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria_548_19_56()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria_550_19_57()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria_552_19_58()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria_554_19_59()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria_556_19_60()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpBinaria_558_19_61()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_3R_PDeclaracaoVariavel_736_10_4()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_PIfThenElse_346_9_26()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_PComando_283_5_30()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_PComando_283_5_30()) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_533_11_19()
 {
    if (jj_3R_PExpLength_502_9_34()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracao_714_21_48()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PDeclaracao_710_9_37()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracaoComposta_725_9_62()
 {
    if (jj_3R_PDeclaracaoVariavel_736_10_4()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PDeclaracao_710_9_37()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracao_713_21_47()
 {
    if (jj_3R_PDeclaracaoVariavel_736_10_4()) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_531_11_18()
 {
    if (jj_3R_PExpNot_491_9_33()) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_529_11_17()
 {
    if (jj_3R_PExpMenos_480_9_32()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracao_711_19_46()
 {
    if (jj_3R_PDeclaracaoComposta_725_9_62()) return true;
    return false;
  }

  static private boolean jj_3R_PExpUnaria_528_9_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PExpUnaria_529_11_17()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpUnaria_531_11_18()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpUnaria_533_11_19()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_PWrite_333_9_50()
 {
    if (jj_scan_token(WRITE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PExpPrimaria_516_13_16()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PExpPrimaria_515_13_15()
 {
    if (jj_3R_PValor_464_9_31()) return true;
    return false;
  }

  static private boolean jj_3R_PDeclaracao_710_9_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PDeclaracao_711_19_46()) {
    jj_scanpos = xsp;
    if (jj_3R_PDeclaracao_713_21_47()) {
    jj_scanpos = xsp;
    if (jj_3R_PDeclaracao_714_21_48()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_PExpPrimaria_514_13_14()
 {
    if (jj_3R_PId_421_9_20()) return true;
    return false;
  }

  static private boolean jj_3R_PIO_312_19_39()
 {
    if (jj_3R_PWrite_333_9_50()) return true;
    return false;
  }

  static private boolean jj_3R_PRead_322_9_49()
 {
    if (jj_scan_token(READ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PId_421_9_20()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PExpPrimaria_513_9_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PExpPrimaria_514_13_14()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpPrimaria_515_13_15()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpPrimaria_516_13_16()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_PIO_311_19_38()
 {
    if (jj_3R_PRead_322_9_49()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoDeclaracao_697_9_24()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_PDeclaracao_710_9_37()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_PComando_283_5_30()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_PExpLength_502_9_34()
 {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    return false;
  }

  static private boolean jj_3R_PIO_310_9_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PIO_311_19_38()) {
    jj_scanpos = xsp;
    if (jj_3R_PIO_312_19_39()) return true;
    }
    return false;
  }

  static private boolean jj_3R_PComandoSimples_684_9_13()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PComando_283_5_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_683_9_12()
 {
    if (jj_3R_PIO_310_9_29()) return true;
    return false;
  }

  static private boolean jj_3R_PExpNot_491_9_33()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_682_9_11()
 {
    if (jj_3R_PThrow_377_9_28()) return true;
    return false;
  }

  static private boolean jj_3R_PSequenciaComando_299_9_51()
 {
    if (jj_3R_PComandoSimples_675_5_1()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_PComando_283_5_30()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_681_9_10()
 {
    if (jj_3R_PTryCatch_362_9_27()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_680_9_9()
 {
    if (jj_3R_PIfThenElse_346_9_26()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_679_9_8()
 {
    if (jj_3R_PWhile_389_9_25()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_678_9_7()
 {
    if (jj_3R_PComandoDeclaracao_697_9_24()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_PComandoSimples_675_5_1()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_677_9_6()
 {
    if (jj_3R_PAtribuicao_410_9_23()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_676_9_5()
 {
    if (jj_3R_PSkip_400_9_22()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_PExpMenos_480_9_32()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    return false;
  }

  static private boolean jj_3R_PComandoSimples_675_5_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PComandoSimples_676_9_5()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_677_9_6()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_678_9_7()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_679_9_8()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_680_9_9()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_681_9_10()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_682_9_11()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_683_9_12()) {
    jj_scanpos = xsp;
    if (jj_3R_PComandoSimples_684_9_13()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_PComando_286_9_41()
 {
    if (jj_3R_PComandoSimples_675_5_1()) return true;
    return false;
  }

  static private boolean jj_3R_PValor_467_19_44()
 {
    if (jj_3R_PValorString_451_9_54()) return true;
    return false;
  }

  static private boolean jj_3R_PValor_466_19_43()
 {
    if (jj_3R_PValorBooleano_442_11_53()) return true;
    return false;
  }

  static private boolean jj_3R_PComando_284_9_40()
 {
    if (jj_3R_PSequenciaComando_299_9_51()) return true;
    return false;
  }

  static private boolean jj_3R_PExpressao_661_13_36()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    return false;
  }

  static private boolean jj_3R_PExpressao_658_13_35()
 {
    if (jj_3R_PExpBinaria_545_9_45()) return true;
    return false;
  }

  static private boolean jj_3R_PComando_283_5_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PComando_284_9_40()) {
    jj_scanpos = xsp;
    if (jj_3R_PComando_286_9_41()) return true;
    }
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_PExpUnaria_528_9_3()) return true;
    return false;
  }

  static private boolean jj_3R_PValor_465_11_42()
 {
    if (jj_3R_PValorInteiro_432_9_52()) return true;
    return false;
  }

  static private boolean jj_3R_PValor_464_9_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PValor_465_11_42()) {
    jj_scanpos = xsp;
    if (jj_3R_PValor_466_19_43()) {
    jj_scanpos = xsp;
    if (jj_3R_PValor_467_19_44()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_PExpressao_655_9_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpressao_658_13_35()) {
    jj_scanpos = xsp;
    if (jj_3R_PExpressao_661_13_36()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_PExpConcat_644_9_65()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    return false;
  }

  static private boolean jj_3R_PValorString_451_9_54()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_PValorBooleano_443_11_64()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_PValorBooleano_442_11_63()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_PValorBooleano_442_11_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PValorBooleano_442_11_63()) {
    jj_scanpos = xsp;
    if (jj_3R_PValorBooleano_443_11_64()) return true;
    }
    return false;
  }

  static private boolean jj_3R_PExpEquals_632_9_69()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    return false;
  }

  static private boolean jj_3R_PValorInteiro_432_9_52()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_PExpOr_620_9_68()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    return false;
  }

  static private boolean jj_3R_PId_421_9_20()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_PExpAnd_608_9_67()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    return false;
  }

  static private boolean jj_3R_PAtribuicao_410_9_23()
 {
    if (jj_3R_PId_421_9_20()) return true;
    if (jj_scan_token(ATTRIB)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    return false;
  }

  static private boolean jj_3R_PExpSub_596_9_66()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    return false;
  }

  static private boolean jj_3R_PSkip_400_9_22()
 {
    if (jj_scan_token(COMAND_SKIP)) return true;
    return false;
  }

  static private boolean jj_3R_PExpDiv_584_9_71()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    return false;
  }

  static private boolean jj_3R_PWhile_389_9_25()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    if (jj_scan_token(DO)) return true;
    if (jj_3R_PComando_283_5_30()) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_PExpSoma_572_9_70()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_558_19_61()
 {
    if (jj_3R_PExpDiv_584_9_71()) return true;
    return false;
  }

  static private boolean jj_3R_PThrow_377_9_28()
 {
    if (jj_scan_token(THROW)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_PExpressao_655_9_21()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_PExpPrimaria_513_9_2()) return true;
    if (jj_scan_token(CONCAT)) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_556_19_60()
 {
    if (jj_3R_PExpSoma_572_9_70()) return true;
    return false;
  }

  static private boolean jj_3R_PExpBinaria_554_19_59()
 {
    if (jj_3R_PExpEquals_632_9_69()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Imp1ParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x53b0000,0x180000,0x6000,0x6000,0x6000,0x1800,0x6000,0x53b0000,0x8000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x520,0x0,0x0,0x11,0x131,0x0,0x131,0x520,0x100,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[11];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Imp1Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Imp1Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new Imp1ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Imp1Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new Imp1ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new Imp1ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Imp1Parser(Imp1ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Imp1ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 9; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[72];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 9; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 72; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 11; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
